name: PR Check

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]

jobs:
  quick-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-3.11-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Check code formatting with ruff
      run: |
        poetry run ruff format --check src/ tests/

    - name: Lint code with ruff
      run: |
        poetry run ruff check src/ tests/

    - name: Run tests
      run: |
        poetry run pytest

    - name: Check if version was updated
      id: version_check
      run: |
        # Get the version from the current branch
        CURRENT_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')

        # Get the version from main branch
        git fetch origin main
        MAIN_VERSION=$(git show origin/main:pyproject.toml | grep '^version = ' | sed 's/version = "\(.*\)"/\1/')

        echo "Current version: $CURRENT_VERSION"
        echo "Main version: $MAIN_VERSION"

        if [ "$CURRENT_VERSION" != "$MAIN_VERSION" ]; then
          echo "version_updated=true" >> $GITHUB_OUTPUT
          echo "✅ Version updated from $MAIN_VERSION to $CURRENT_VERSION"
        else
          echo "version_updated=false" >> $GITHUB_OUTPUT
          echo "⚠️ Version not updated (still $CURRENT_VERSION)"
        fi

    - name: Comment PR with version status
      uses: actions/github-script@v6
      with:
        script: |
          const versionUpdated = '${{ steps.version_check.outputs.version_updated }}' === 'true';
          const message = versionUpdated
            ? '✅ Version has been updated in this PR'
            : '⚠️ Version has not been updated. Consider updating the version in `pyproject.toml` if this PR introduces changes that warrant a new release.';

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: message
          });
